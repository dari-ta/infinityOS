#!/usr/bin/env python2
# Based on the original #! cb-exit

import pygtk
pygtk.require('2.0')
import gtk
import os
import getpass

class cb_exit:
	def disable_buttons(self):
		self.cancel.set_sensitive(False)
		self.btna.set_sensitive(False)

	def cancel_action(self,btn):
		self.disable_buttons()
		gtk.main_quit()


	def ac_shutdown(self):
		self.status.set_label("Powering off")
		os.system("systemctl poweroff");
	
	def ac_reboot(self):
		self.status.set_label("Rebooting")
		os.system("systemctl reboot");
		
	def ac_logout(self):
		self.status.set_label("Logging out")
		os.system("openbox --exit")
		
	def ac_suspend(self):
		self.status.set_label("Suspendung")
		os.system("systemctl suspend")

	def action_invoked(self, btn):
		tree_iter = self.selectbox.get_active_iter()
		if tree_iter != None:
			model = self.selectbox.get_model()
			row_id = model[tree_iter][0]
			self.disable_buttons()
			if row_id == 1:
				self.ac_shutdown()
			if row_id == 2:
				self.ac_reboot()
			if row_id == 3:
				self.ac_logout()
			if row_id == 4:
				self.ac_suspend()
		else:
			print("NF")

	def create_window(self):
		self.window = gtk.Window()
		title = "Exit"
		self.window.set_title(title)
		self.window.set_border_width(0)
		self.window.set_size_request(300, 150)
		self.window.set_resizable(False)
		self.window.set_keep_above(True)
		self.window.stick
		self.window.set_position(1)
		self.window.connect("delete_event", gtk.main_quit)
		windowicon = self.window.render_icon(gtk.STOCK_QUIT, gtk.ICON_SIZE_MENU)
		self.window.set_icon(windowicon)

		
		
		self.action_store = gtk.ListStore(int, str)
		self.action_store.append([1, "Power Off"])
		self.action_store.append([2, "Reboot"])
		self.action_store.append([3, "Logout"])
		self.action_store.append([4, "Suspend"])
		
		self.selectbox = gtk.ComboBox(self.action_store)
		renderer_text = gtk.CellRendererText()
		self.selectbox.pack_start(renderer_text, True)
		self.selectbox.add_attribute(renderer_text, "text", 1)
		self.selectbox.set_size_request(260, 30)
		self.selectbox.set_active(0)
		self.selectbox.show()
		
		
		
		#Create HBox for buttons
		self.button_box = gtk.HBox()
		self.button_box.show()
		
		
		
		
		#Action button
		self.btna = gtk.Button("_OK")
		self.btna.set_border_width(4)
		self.btna.connect("clicked", self.action_invoked)
		self.btna.set_size_request(130, 40)
		self.button_box.pack_start(self.btna, fill=False)
		self.btna.show()
		
		#Cancel button
		self.cancel = gtk.Button(stock = gtk.STOCK_CANCEL)
		self.cancel.set_border_width(4)
		self.cancel.connect("clicked", self.cancel_action)
		self.cancel.set_size_request(130, 40)
		self.button_box.pack_start(self.cancel, fill=False)
		self.cancel.show()
		
		#Create HBox for status label
		self.label_box = gtk.HBox()
		self.label_box.show()
		self.status = gtk.Label()
		self.status.show()
		self.label_box.pack_start(self.status)
		
		image = gtk.Image()
		pixbuf = gtk.gdk.pixbuf_new_from_file("/usr/bin/infinity-icon.png")
		sbuf = pixbuf.scale_simple(50,50,gtk.gdk.INTERP_BILINEAR)
		image.set_from_pixbuf(sbuf)
		image.show()
		
		#Create VBox and pack the above HBox's
		self.vbox = gtk.VBox()
		self.vbox.pack_start(image)
		self.vbox.pack_start(self.selectbox, fill=False)
		self.vbox.pack_start(self.label_box)
		self.vbox.pack_start(self.button_box, fill=False)
		self.vbox.show()
		
		self.window.add(self.vbox)
		self.window.show()
		
	def __init__(self):
		self.create_window()


def main():
    gtk.main()

if __name__ == "__main__":
    go = cb_exit()
    main()
